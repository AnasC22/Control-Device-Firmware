
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001348  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001484  08001484  00002484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014a8  080014a8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080014a8  080014a8  000024a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014b0  080014b0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b0  080014b0  000024b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014b4  080014b4  000024b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080014b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000000c  080014c4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080014c4  0000303c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002691  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d47  00000000  00000000  000056c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  00006410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a0  00000000  00000000  000067c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000120ca  00000000  00000000  00006a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004772  00000000  00000000  00018b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007081e  00000000  00000000  0001d29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008daba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d04  00000000  00000000  0008db00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0008e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800146c 	.word	0x0800146c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800146c 	.word	0x0800146c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <bootloader_init>:
 */
#include "bootloader.h"

BootloaderStorage storage = {.state = BOOTLOADER_UNINITIALIZED};

void bootloader_init(BootloaderConfig *config) {
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	storage.config = config;
 8000470:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <bootloader_init+0x2c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6013      	str	r3, [r2, #0]
	storage.binary_size = 0;
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <bootloader_init+0x2c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
	storage.state = BOOTLOADER_IDLE;
 800047c:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <bootloader_init+0x2c>)
 800047e:	2201      	movs	r2, #1
 8000480:	731a      	strb	r2, [r3, #12]
	storage.bytes_written = 0;
 8000482:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <bootloader_init+0x2c>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000028 	.word	0x20000028

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	BootloaderConfig config = {.app_start_addr = APP_START_ADDR, .app_end_addr = APP_END_ADDR};
 800049e:	4a08      	ldr	r2, [pc, #32]	@ (80004c0 <main+0x28>)
 80004a0:	463b      	mov	r3, r7
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 f8de 	bl	800066a <HAL_Init>

  /* USER CODE BEGIN Init */
  bootloader_init(&config);
 80004ae:	463b      	mov	r3, r7
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ffd9 	bl	8000468 <bootloader_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b6:	f000 f805 	bl	80004c4 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ba:	bf00      	nop
 80004bc:	e7fd      	b.n	80004ba <main+0x22>
 80004be:	bf00      	nop
 80004c0:	08001484 	.word	0x08001484

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b092      	sub	sp, #72	@ 0x48
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2234      	movs	r2, #52	@ 0x34
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 ff9e 	bl	8001414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	463b      	mov	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <SystemClock_Config+0x8c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80004ee:	4a18      	ldr	r2, [pc, #96]	@ (8000550 <SystemClock_Config+0x8c>)
 80004f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004f4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f6:	2310      	movs	r3, #16
 80004f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004fa:	2301      	movs	r3, #1
 80004fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000502:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000508:	2300      	movs	r3, #0
 800050a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f9fd 	bl	8000910 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800051c:	f000 f81a 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fd19 	bl	8000f70 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000544:	f000 f806 	bl	8000554 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3748      	adds	r7, #72	@ 0x48
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40007000 	.word	0x40007000

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000566:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <HAL_MspInit+0x58>)
 8000568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800056a:	4a13      	ldr	r2, [pc, #76]	@ (80005b8 <HAL_MspInit+0x58>)
 800056c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000570:	6253      	str	r3, [r2, #36]	@ 0x24
 8000572:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <HAL_MspInit+0x58>)
 8000574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <HAL_MspInit+0x58>)
 8000580:	6a1b      	ldr	r3, [r3, #32]
 8000582:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <HAL_MspInit+0x58>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6213      	str	r3, [r2, #32]
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <HAL_MspInit+0x58>)
 800058c:	6a1b      	ldr	r3, [r3, #32]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <HAL_MspInit+0x58>)
 8000598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800059a:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <HAL_MspInit+0x58>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	6253      	str	r3, [r2, #36]	@ 0x24
 80005a2:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <HAL_MspInit+0x58>)
 80005a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f880 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000620:	f7ff fff8 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000626:	490c      	ldr	r1, [pc, #48]	@ (8000658 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <LoopFillZerobss+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a09      	ldr	r2, [pc, #36]	@ (8000660 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800063c:	4c09      	ldr	r4, [pc, #36]	@ (8000664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064a:	f000 feeb 	bl	8001424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff ff23 	bl	8000498 <main>
  bx lr
 8000652:	4770      	bx	lr
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800065c:	080014b8 	.word	0x080014b8
  ldr r2, =_sbss
 8000660:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000664:	2000003c 	.word	0x2000003c

08000668 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_IRQHandler>

0800066a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f917 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067a:	200f      	movs	r0, #15
 800067c:	f000 f80e 	bl	800069c <HAL_InitTick>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e001      	b.n	8000690 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800068c:	f7ff ff68 	bl	8000560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <HAL_InitTick+0x68>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d022      	beq.n	80006f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <HAL_InitTick+0x6c>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_InitTick+0x68>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80006c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f916 	bl	80008f6 <HAL_SYSTICK_Config>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10f      	bne.n	80006f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d809      	bhi.n	80006ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d6:	2200      	movs	r2, #0
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	f04f 30ff 	mov.w	r0, #4294967295
 80006de:	f000 f8ee 	bl	80008be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_InitTick+0x70>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	e007      	b.n	80006fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e004      	b.n	80006fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e001      	b.n	80006fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000008 	.word	0x20000008
 8000708:	20000000 	.word	0x20000000
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_IncTick+0x1c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_IncTick+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4413      	add	r3, r2
 800071e:	4a03      	ldr	r2, [pc, #12]	@ (800072c <HAL_IncTick+0x1c>)
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000038 	.word	0x20000038
 8000730:	20000008 	.word	0x20000008

08000734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b02      	ldr	r3, [pc, #8]	@ (8000744 <HAL_GetTick+0x10>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000038 	.word	0x20000038

08000748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077a:	4a04      	ldr	r2, [pc, #16]	@ (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	@ (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	@ (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	@ 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	@ 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff90 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff49 	bl	8000748 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff5e 	bl	8000790 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff90 	bl	8000800 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5f 	bl	80007ac <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffb0 	bl	8000864 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e31d      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000922:	4b94      	ldr	r3, [pc, #592]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 030c 	and.w	r3, r3, #12
 800092a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800092c:	4b91      	ldr	r3, [pc, #580]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000934:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b00      	cmp	r3, #0
 8000940:	d07b      	beq.n	8000a3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	2b08      	cmp	r3, #8
 8000946:	d006      	beq.n	8000956 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2b0c      	cmp	r3, #12
 800094c:	d10f      	bne.n	800096e <HAL_RCC_OscConfig+0x5e>
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000954:	d10b      	bne.n	800096e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000956:	4b87      	ldr	r3, [pc, #540]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d06a      	beq.n	8000a38 <HAL_RCC_OscConfig+0x128>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d166      	bne.n	8000a38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e2f7      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d106      	bne.n	8000984 <HAL_RCC_OscConfig+0x74>
 8000976:	4b7f      	ldr	r3, [pc, #508]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a7e      	ldr	r2, [pc, #504]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 800097c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000980:	6013      	str	r3, [r2, #0]
 8000982:	e02d      	b.n	80009e0 <HAL_RCC_OscConfig+0xd0>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10c      	bne.n	80009a6 <HAL_RCC_OscConfig+0x96>
 800098c:	4b79      	ldr	r3, [pc, #484]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a78      	ldr	r2, [pc, #480]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b76      	ldr	r3, [pc, #472]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a75      	ldr	r2, [pc, #468]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 800099e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e01c      	b.n	80009e0 <HAL_RCC_OscConfig+0xd0>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d10c      	bne.n	80009c8 <HAL_RCC_OscConfig+0xb8>
 80009ae:	4b71      	ldr	r3, [pc, #452]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a70      	ldr	r2, [pc, #448]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a6d      	ldr	r2, [pc, #436]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e00b      	b.n	80009e0 <HAL_RCC_OscConfig+0xd0>
 80009c8:	4b6a      	ldr	r3, [pc, #424]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a69      	ldr	r2, [pc, #420]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b67      	ldr	r3, [pc, #412]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a66      	ldr	r2, [pc, #408]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 80009da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d013      	beq.n	8000a10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e8:	f7ff fea4 	bl	8000734 <HAL_GetTick>
 80009ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80009ee:	e008      	b.n	8000a02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f0:	f7ff fea0 	bl	8000734 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b64      	cmp	r3, #100	@ 0x64
 80009fc:	d901      	bls.n	8000a02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e2ad      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a02:	4b5c      	ldr	r3, [pc, #368]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f0      	beq.n	80009f0 <HAL_RCC_OscConfig+0xe0>
 8000a0e:	e014      	b.n	8000a3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a10:	f7ff fe90 	bl	8000734 <HAL_GetTick>
 8000a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a16:	e008      	b.n	8000a2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a18:	f7ff fe8c 	bl	8000734 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b64      	cmp	r3, #100	@ 0x64
 8000a24:	d901      	bls.n	8000a2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000a26:	2303      	movs	r3, #3
 8000a28:	e299      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a2a:	4b52      	ldr	r3, [pc, #328]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f0      	bne.n	8000a18 <HAL_RCC_OscConfig+0x108>
 8000a36:	e000      	b.n	8000a3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d05a      	beq.n	8000afc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d005      	beq.n	8000a58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2b0c      	cmp	r3, #12
 8000a50:	d119      	bne.n	8000a86 <HAL_RCC_OscConfig+0x176>
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d116      	bne.n	8000a86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a58:	4b46      	ldr	r3, [pc, #280]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <HAL_RCC_OscConfig+0x160>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d001      	beq.n	8000a70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e276      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a70:	4b40      	ldr	r3, [pc, #256]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	493d      	ldr	r1, [pc, #244]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000a80:	4313      	orrs	r3, r2
 8000a82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a84:	e03a      	b.n	8000afc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d020      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <HAL_RCC_OscConfig+0x268>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a94:	f7ff fe4e 	bl	8000734 <HAL_GetTick>
 8000a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a9a:	e008      	b.n	8000aae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fe4a 	bl	8000734 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d901      	bls.n	8000aae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e257      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f0      	beq.n	8000a9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aba:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	492a      	ldr	r1, [pc, #168]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	604b      	str	r3, [r1, #4]
 8000ace:	e015      	b.n	8000afc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <HAL_RCC_OscConfig+0x268>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fe2d 	bl	8000734 <HAL_GetTick>
 8000ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000adc:	e008      	b.n	8000af0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ade:	f7ff fe29 	bl	8000734 <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d901      	bls.n	8000af0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e236      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1f0      	bne.n	8000ade <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80b8 	beq.w	8000c7a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d170      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <HAL_RCC_OscConfig+0x218>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e21a      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a1a      	ldr	r2, [r3, #32]
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d921      	bls.n	8000b7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fc09 	bl	8001354 <RCC_SetFlashLatencyFromMSIRange>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e208      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	4906      	ldr	r1, [pc, #24]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	061b      	lsls	r3, r3, #24
 8000b6c:	4901      	ldr	r1, [pc, #4]	@ (8000b74 <HAL_RCC_OscConfig+0x264>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	604b      	str	r3, [r1, #4]
 8000b72:	e020      	b.n	8000bb6 <HAL_RCC_OscConfig+0x2a6>
 8000b74:	40023800 	.word	0x40023800
 8000b78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b7c:	4b99      	ldr	r3, [pc, #612]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	4996      	ldr	r1, [pc, #600]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b8e:	4b95      	ldr	r3, [pc, #596]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	061b      	lsls	r3, r3, #24
 8000b9c:	4991      	ldr	r1, [pc, #580]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fbd4 	bl	8001354 <RCC_SetFlashLatencyFromMSIRange>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e1d3      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	0b5b      	lsrs	r3, r3, #13
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bc6:	4a87      	ldr	r2, [pc, #540]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000bc8:	6892      	ldr	r2, [r2, #8]
 8000bca:	0912      	lsrs	r2, r2, #4
 8000bcc:	f002 020f 	and.w	r2, r2, #15
 8000bd0:	4985      	ldr	r1, [pc, #532]	@ (8000de8 <HAL_RCC_OscConfig+0x4d8>)
 8000bd2:	5c8a      	ldrb	r2, [r1, r2]
 8000bd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000bd6:	4a85      	ldr	r2, [pc, #532]	@ (8000dec <HAL_RCC_OscConfig+0x4dc>)
 8000bd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bda:	4b85      	ldr	r3, [pc, #532]	@ (8000df0 <HAL_RCC_OscConfig+0x4e0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fd5c 	bl	800069c <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d045      	beq.n	8000c7a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	e1b5      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d029      	beq.n	8000c4e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bfa:	4b7e      	ldr	r3, [pc, #504]	@ (8000df4 <HAL_RCC_OscConfig+0x4e4>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fd98 	bl	8000734 <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c08:	f7ff fd94 	bl	8000734 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e1a1      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c1a:	4b72      	ldr	r3, [pc, #456]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f0      	beq.n	8000c08 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c26:	4b6f      	ldr	r3, [pc, #444]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	496c      	ldr	r1, [pc, #432]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000c34:	4313      	orrs	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c38:	4b6a      	ldr	r3, [pc, #424]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	061b      	lsls	r3, r3, #24
 8000c46:	4967      	ldr	r1, [pc, #412]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
 8000c4c:	e015      	b.n	8000c7a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c4e:	4b69      	ldr	r3, [pc, #420]	@ (8000df4 <HAL_RCC_OscConfig+0x4e4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fd6e 	bl	8000734 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fd6a 	bl	8000734 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e177      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d030      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d016      	beq.n	8000cbc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000df8 <HAL_RCC_OscConfig+0x4e8>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c94:	f7ff fd4e 	bl	8000734 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fd4a 	bl	8000734 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e157      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000cae:	4b4d      	ldr	r3, [pc, #308]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x38c>
 8000cba:	e015      	b.n	8000ce8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8000df8 <HAL_RCC_OscConfig+0x4e8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc2:	f7ff fd37 	bl	8000734 <HAL_GetTick>
 8000cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cca:	f7ff fd33 	bl	8000734 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d901      	bls.n	8000cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e140      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000cdc:	4b41      	ldr	r3, [pc, #260]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f0      	bne.n	8000cca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 80b5 	beq.w	8000e60 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10d      	bne.n	8000d22 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0a:	4a36      	ldr	r2, [pc, #216]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6253      	str	r3, [r2, #36]	@ 0x24
 8000d12:	4b34      	ldr	r3, [pc, #208]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d22:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <HAL_RCC_OscConfig+0x4ec>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d118      	bne.n	8000d60 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d2e:	4b33      	ldr	r3, [pc, #204]	@ (8000dfc <HAL_RCC_OscConfig+0x4ec>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a32      	ldr	r2, [pc, #200]	@ (8000dfc <HAL_RCC_OscConfig+0x4ec>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d3a:	f7ff fcfb 	bl	8000734 <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d42:	f7ff fcf7 	bl	8000734 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b64      	cmp	r3, #100	@ 0x64
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e104      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d54:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <HAL_RCC_OscConfig+0x4ec>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d106      	bne.n	8000d76 <HAL_RCC_OscConfig+0x466>
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d72:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d74:	e02d      	b.n	8000dd2 <HAL_RCC_OscConfig+0x4c2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x488>
 8000d7e:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d82:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d88:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8e:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d94:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d96:	e01c      	b.n	8000dd2 <HAL_RCC_OscConfig+0x4c2>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	d10c      	bne.n	8000dba <HAL_RCC_OscConfig+0x4aa>
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da4:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000daa:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db0:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000db8:	e00b      	b.n	8000dd2 <HAL_RCC_OscConfig+0x4c2>
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dbe:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dc4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dca:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <HAL_RCC_OscConfig+0x4d4>)
 8000dcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000dd0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d024      	beq.n	8000e24 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fcab 	bl	8000734 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000de0:	e019      	b.n	8000e16 <HAL_RCC_OscConfig+0x506>
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	08001498 	.word	0x08001498
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000004 	.word	0x20000004
 8000df4:	42470020 	.word	0x42470020
 8000df8:	42470680 	.word	0x42470680
 8000dfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e00:	f7ff fc98 	bl	8000734 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e0a3      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e16:	4b54      	ldr	r3, [pc, #336]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0ee      	beq.n	8000e00 <HAL_RCC_OscConfig+0x4f0>
 8000e22:	e014      	b.n	8000e4e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc86 	bl	8000734 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e2a:	e00a      	b.n	8000e42 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fc82 	bl	8000734 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e08d      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1ee      	bne.n	8000e2c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d105      	bne.n	8000e60 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e54:	4b44      	ldr	r3, [pc, #272]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	4a43      	ldr	r2, [pc, #268]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d079      	beq.n	8000f5c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b0c      	cmp	r3, #12
 8000e6c:	d056      	beq.n	8000f1c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d13b      	bne.n	8000eee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <HAL_RCC_OscConfig+0x65c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fc5a 	bl	8000734 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e84:	f7ff fc56 	bl	8000734 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e063      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e96:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea2:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb2:	4319      	orrs	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	492b      	ldr	r1, [pc, #172]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <HAL_RCC_OscConfig+0x65c>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fc35 	bl	8000734 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ece:	f7ff fc31 	bl	8000734 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e03e      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f0      	beq.n	8000ece <HAL_RCC_OscConfig+0x5be>
 8000eec:	e036      	b.n	8000f5c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eee:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <HAL_RCC_OscConfig+0x65c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc1e 	bl	8000734 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efc:	f7ff fc1a 	bl	8000734 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e027      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x5ec>
 8000f1a:	e01f      	b.n	8000f5c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e01a      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_RCC_OscConfig+0x658>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10d      	bne.n	8000f58 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	42470060 	.word	0x42470060

08000f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e11a      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f84:	4b8f      	ldr	r3, [pc, #572]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d919      	bls.n	8000fc6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x34>
 8000f98:	4b8a      	ldr	r3, [pc, #552]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a89      	ldr	r2, [pc, #548]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b87      	ldr	r3, [pc, #540]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 0201 	bic.w	r2, r3, #1
 8000fac:	4985      	ldr	r1, [pc, #532]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb4:	4b83      	ldr	r3, [pc, #524]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0f9      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d008      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	497a      	ldr	r1, [pc, #488]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 808e 	beq.w	800110e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d107      	bne.n	800100a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ffa:	4b73      	ldr	r3, [pc, #460]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d121      	bne.n	800104a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0d7      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d107      	bne.n	8001022 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001012:	4b6d      	ldr	r3, [pc, #436]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d115      	bne.n	800104a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e0cb      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d107      	bne.n	800103a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800102a:	4b67      	ldr	r3, [pc, #412]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0bf      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800103a:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0b7      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800104a:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f023 0203 	bic.w	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	495c      	ldr	r1, [pc, #368]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8001058:	4313      	orrs	r3, r2
 800105a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800105c:	f7ff fb6a 	bl	8000734 <HAL_GetTick>
 8001060:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d112      	bne.n	8001090 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800106a:	e00a      	b.n	8001082 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106c:	f7ff fb62 	bl	8000734 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107a:	4293      	cmp	r3, r2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e09b      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001082:	4b51      	ldr	r3, [pc, #324]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d1ee      	bne.n	800106c <HAL_RCC_ClockConfig+0xfc>
 800108e:	e03e      	b.n	800110e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d112      	bne.n	80010be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109a:	f7ff fb4b 	bl	8000734 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e084      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b0:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b0c      	cmp	r3, #12
 80010ba:	d1ee      	bne.n	800109a <HAL_RCC_ClockConfig+0x12a>
 80010bc:	e027      	b.n	800110e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d11d      	bne.n	8001102 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c6:	e00a      	b.n	80010de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c8:	f7ff fb34 	bl	8000734 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e06d      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	4b3a      	ldr	r3, [pc, #232]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d1ee      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x158>
 80010ea:	e010      	b.n	800110e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ec:	f7ff fb22 	bl	8000734 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e05b      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001102:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1ee      	bne.n	80010ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800110e:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d219      	bcs.n	8001150 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_ClockConfig+0x1be>
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 0201 	bic.w	r2, r3, #1
 8001136:	4923      	ldr	r1, [pc, #140]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <HAL_RCC_ClockConfig+0x254>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e034      	b.n	80011ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	4917      	ldr	r1, [pc, #92]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800116a:	4313      	orrs	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	490f      	ldr	r1, [pc, #60]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800118e:	f000 f823 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 8001192:	4602      	mov	r2, r0
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_RCC_ClockConfig+0x258>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	490b      	ldr	r1, [pc, #44]	@ (80011cc <HAL_RCC_ClockConfig+0x25c>)
 80011a0:	5ccb      	ldrb	r3, [r1, r3]
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_RCC_ClockConfig+0x260>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_RCC_ClockConfig+0x264>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fa74 	bl	800069c <HAL_InitTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80011b8:	7afb      	ldrb	r3, [r7, #11]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00
 80011c8:	40023800 	.word	0x40023800
 80011cc:	08001498 	.word	0x08001498
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011dc:	b08e      	sub	sp, #56	@ 0x38
 80011de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80011e0:	4b58      	ldr	r3, [pc, #352]	@ (8001344 <HAL_RCC_GetSysClockFreq+0x16c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b0c      	cmp	r3, #12
 80011ee:	d00d      	beq.n	800120c <HAL_RCC_GetSysClockFreq+0x34>
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	f200 8092 	bhi.w	800131a <HAL_RCC_GetSysClockFreq+0x142>
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x28>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x2e>
 80011fe:	e08c      	b.n	800131a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001200:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <HAL_RCC_GetSysClockFreq+0x170>)
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001204:	e097      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001206:	4b51      	ldr	r3, [pc, #324]	@ (800134c <HAL_RCC_GetSysClockFreq+0x174>)
 8001208:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800120a:	e094      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120e:	0c9b      	lsrs	r3, r3, #18
 8001210:	f003 020f 	and.w	r2, r3, #15
 8001214:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x178>)
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121c:	0d9b      	lsrs	r3, r3, #22
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	3301      	adds	r3, #1
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001226:	4b47      	ldr	r3, [pc, #284]	@ (8001344 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d021      	beq.n	8001276 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001234:	2200      	movs	r2, #0
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	61fa      	str	r2, [r7, #28]
 800123a:	4b44      	ldr	r3, [pc, #272]	@ (800134c <HAL_RCC_GetSysClockFreq+0x174>)
 800123c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001240:	464a      	mov	r2, r9
 8001242:	fb03 f202 	mul.w	r2, r3, r2
 8001246:	2300      	movs	r3, #0
 8001248:	4644      	mov	r4, r8
 800124a:	fb04 f303 	mul.w	r3, r4, r3
 800124e:	4413      	add	r3, r2
 8001250:	4a3e      	ldr	r2, [pc, #248]	@ (800134c <HAL_RCC_GetSysClockFreq+0x174>)
 8001252:	4644      	mov	r4, r8
 8001254:	fba4 0102 	umull	r0, r1, r4, r2
 8001258:	440b      	add	r3, r1
 800125a:	4619      	mov	r1, r3
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	2200      	movs	r2, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	617a      	str	r2, [r7, #20]
 8001264:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001268:	f7fe ff88 	bl	800017c <__aeabi_uldivmod>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4613      	mov	r3, r2
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
 8001274:	e04e      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001278:	2200      	movs	r2, #0
 800127a:	469a      	mov	sl, r3
 800127c:	4693      	mov	fp, r2
 800127e:	4652      	mov	r2, sl
 8001280:	465b      	mov	r3, fp
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	f04f 0100 	mov.w	r1, #0
 800128a:	0159      	lsls	r1, r3, #5
 800128c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001290:	0150      	lsls	r0, r2, #5
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ebb2 080a 	subs.w	r8, r2, sl
 800129a:	eb63 090b 	sbc.w	r9, r3, fp
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012b2:	ebb2 0408 	subs.w	r4, r2, r8
 80012b6:	eb63 0509 	sbc.w	r5, r3, r9
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	00eb      	lsls	r3, r5, #3
 80012c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012c8:	00e2      	lsls	r2, r4, #3
 80012ca:	4614      	mov	r4, r2
 80012cc:	461d      	mov	r5, r3
 80012ce:	eb14 030a 	adds.w	r3, r4, sl
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	eb45 030b 	adc.w	r3, r5, fp
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012e6:	4629      	mov	r1, r5
 80012e8:	028b      	lsls	r3, r1, #10
 80012ea:	4620      	mov	r0, r4
 80012ec:	4629      	mov	r1, r5
 80012ee:	4604      	mov	r4, r0
 80012f0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80012f4:	4601      	mov	r1, r0
 80012f6:	028a      	lsls	r2, r1, #10
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	60fa      	str	r2, [r7, #12]
 8001304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001308:	f7fe ff38 	bl	800017c <__aeabi_uldivmod>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4613      	mov	r3, r2
 8001312:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8001314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001318:	e00d      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_RCC_GetSysClockFreq+0x16c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	0b5b      	lsrs	r3, r3, #13
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3301      	adds	r3, #1
 800132a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001338:	4618      	mov	r0, r3
 800133a:	3738      	adds	r7, #56	@ 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	00f42400 	.word	0x00f42400
 800134c:	016e3600 	.word	0x016e3600
 8001350:	0800148c 	.word	0x0800148c

08001354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001360:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d12c      	bne.n	80013c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800136c:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	e016      	b.n	80013b2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80013a4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80013ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80013b8:	d105      	bne.n	80013c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80013c0:	d101      	bne.n	80013c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80013c2:	2301      	movs	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d105      	bne.n	80013d8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 0201 	bic.w	r2, r3, #1
 80013e0:	490b      	ldr	r1, [pc, #44]	@ (8001410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000
 8001410:	40023c00 	.word	0x40023c00

08001414 <memset>:
 8001414:	4603      	mov	r3, r0
 8001416:	4402      	add	r2, r0
 8001418:	4293      	cmp	r3, r2
 800141a:	d100      	bne.n	800141e <memset+0xa>
 800141c:	4770      	bx	lr
 800141e:	f803 1b01 	strb.w	r1, [r3], #1
 8001422:	e7f9      	b.n	8001418 <memset+0x4>

08001424 <__libc_init_array>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	2600      	movs	r6, #0
 8001428:	4d0c      	ldr	r5, [pc, #48]	@ (800145c <__libc_init_array+0x38>)
 800142a:	4c0d      	ldr	r4, [pc, #52]	@ (8001460 <__libc_init_array+0x3c>)
 800142c:	1b64      	subs	r4, r4, r5
 800142e:	10a4      	asrs	r4, r4, #2
 8001430:	42a6      	cmp	r6, r4
 8001432:	d109      	bne.n	8001448 <__libc_init_array+0x24>
 8001434:	f000 f81a 	bl	800146c <_init>
 8001438:	2600      	movs	r6, #0
 800143a:	4d0a      	ldr	r5, [pc, #40]	@ (8001464 <__libc_init_array+0x40>)
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <__libc_init_array+0x44>)
 800143e:	1b64      	subs	r4, r4, r5
 8001440:	10a4      	asrs	r4, r4, #2
 8001442:	42a6      	cmp	r6, r4
 8001444:	d105      	bne.n	8001452 <__libc_init_array+0x2e>
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	f855 3b04 	ldr.w	r3, [r5], #4
 800144c:	4798      	blx	r3
 800144e:	3601      	adds	r6, #1
 8001450:	e7ee      	b.n	8001430 <__libc_init_array+0xc>
 8001452:	f855 3b04 	ldr.w	r3, [r5], #4
 8001456:	4798      	blx	r3
 8001458:	3601      	adds	r6, #1
 800145a:	e7f2      	b.n	8001442 <__libc_init_array+0x1e>
 800145c:	080014b0 	.word	0x080014b0
 8001460:	080014b0 	.word	0x080014b0
 8001464:	080014b0 	.word	0x080014b0
 8001468:	080014b4 	.word	0x080014b4

0800146c <_init>:
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	bf00      	nop
 8001470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001472:	bc08      	pop	{r3}
 8001474:	469e      	mov	lr, r3
 8001476:	4770      	bx	lr

08001478 <_fini>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr
